
Weiter zum Hauptinhalt

Level 2
16%
400/2499 XP

    Docs Learn Durchsuchen Erstellen einer Buildpipeline mit Azure-Pipelines Übung: Veröffentlichen des Ergebnisses in der Pipeline 

Übung: Veröffentlichen des Ergebnisses in der Pipeline
Abgeschlossen 100 XP

    10 Minuten

An diesem Punkt können Sie das Webprojekt Space Game durch die Pipeline erstellen.

Aber wo werden die Ergebnisse des Builds abgelegt? Im Moment verbleibt die Ausgabe des Builds auf dem temporären Buildserver. Mara benötigt eine Möglichkeit, diesen Build an Amita zu übergeben, damit sie mit dem Testen beginnen kann.

Sie können Buildartefakte in Microsoft Azure Pipelines speichern, damit sie später für andere Mitglieder Ihres Teams verfügbar sind, nachdem der Build abgeschlossen wurde. Genau das werden Sie hier machen. Als Bonus gestalten Sie außerdem noch die Buildkonfiguration so um, dass sie Variablen verwendet, damit sich die Konfiguration einfacher lesen und auf dem neuesten Stand halten lässt.

Hinweis

Mit Azure Pipelines können Sie die erstellte App automatisch in einer Test- oder Produktionsumgebung bereitstellen, die in der Cloud oder in Ihrem Rechenzentrum ausgeführt wird. Im Moment ist Maras Ziel nur, Builds zu erzeugen, die sie an die Qualitätssicherung übergeben kann, indem sie deren bestehende Prozesse nutzt.
Veröffentlichen des Builds in der Pipeline

In .NET Core können Sie Ihre App als ZIP-Datei packen. Dann können Sie die integrierte Aufgabe PublishBuildArtifacts@1 verwenden, um die ZIP-Datei in Azure Pipelines zu veröffentlichen.

    Ändern Sie in Visual Studio Code azure-pipelines.yml, wie hier gezeigt:
    yml

trigger:
- '*'

pool:
  vmImage: 'ubuntu-20.04'
  demands:
  - npm

steps:
- task: UseDotNet@2
  displayName: 'Use .NET SDK 5.0'
  inputs:
    version: 5.0.203

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false

- script: './node_modules/.bin/node-sass Tailspin.SpaceGame.Web/wwwroot --output Tailspin.SpaceGame.Web/wwwroot'
  displayName: 'Compile Sass assets'

- task: gulp@1
  displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: Tailspin.SpaceGame.Web/wwwroot

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build the project - Release'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration Release'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - Release'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration Release --output $(Build.ArtifactStagingDirectory)/Release'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()

Diese Version von azure-pipelines.yml sieht aus wie die vorherige Version, fügt aber zwei zusätzliche Aufgaben hinzu.

Die erste Aufgabe verwendet die Aufgabe DotNetCoreCLI@2, um die Buildergebnisse der App (einschließlich ihrer Abhängigkeiten) in einem Ordner zu veröffentlichen oder darin zu packen. Das Argument zipAfterPublish gibt an, dass die Buildergebnisse einer ZIP-Datei hinzugefügt werden sollen.

Die zweite Aufgabe verwendet die Aufgabe PublishBuildArtifacts@1, um die ZIP-Datei in Azure Pipelines zu veröffentlichen. Das Argument condition gibt an, dass die Aufgabe nur ausgeführt werden soll, wenn die vorherige Aufgabe erfolgreich war. succeeded() ist die Standardbedingung, weshalb Sie sie nicht angeben müssen. Wir zeigen sie aber hier, um ihre Verwendung zu demonstrieren.

Fügen Sie im integrierten Terminal dem Index die Datei azure-pipelines.yml hinzu, committen Sie die Änderungen, und pushen Sie die Änderung an GitHub.

Tipp

Bevor Sie diese Git-Befehle ausführen, denken Sie daran, azure-pipelines.yml zu speichern.
Bash

    git add azure-pipelines.yml
    git commit -m "Add publish tasks"
    git push origin build-pipeline

    Verfolgen Sie den Buildvorgang wie schon zuvor in Azure Pipelines entlang der einzelnen Schritte.

    Wenn die Pipeline abgeschlossen ist, wecheln Sie zurück zur Zusammenfassung für den Build.

    Unter Related steht 1 published.

    Die Zusammenfassung des Builds mit Zeitänderungen und Artefakten.

    Wählen Sie das Artefakt aus.

    Erweitern Sie den Ablageordner.

    Sie sehen eine ZIP-Datei, die Ihre erstellte App und deren Abhängigkeiten enthält:

    Die gepackte App im Artefakte-Explorer.

    Wenn Sie eine optionale Übung ausprobieren möchten, können Sie diese ZIP-Datei auf Ihren Computer herunterladen und ihren Inhalt erkunden. Wählen Sie dazu die ZIP-Datei aus und dann den Downloadpfeil, der angezeigt wird, wenn Sie mit dem Mauszeiger auf den Namen der ZIP-Datei zeigen.

Definieren von Variablen zur Verbesserung der Lesbarkeit

Mara tritt zurück, um ihre Arbeit zu begutachten. Die Buildkonfiguration macht, was sie braucht, aber sie möchte sicherstellen, dass Andy und andere Mitarbeiter problemlos helfen können, sie auf dem neuesten Stand zu halten und sie zu erweitern.

Variablen ermöglichen es Ihnen, Werte einmalig zu definieren und dann in Ihrer gesamten Pipeline auf diese Werte zu verweisen. Azure Pipelines ersetzt jede Variable durch ihren aktuellen Wert, wenn die Pipeline ausgeführt wird.

Wie in jeder anderen Programmiersprache auch, können Sie mit Variablen Aktionen ausführen wie:

    Definieren von Werten, die sich zwischen den Ausführungen Ihrer Pipeline ändern können.
    Speichern von Informationen, die sich in Ihrer Pipeline wiederholen, an einem Ort, z. B. eine Versionsnummer oder einen Dateipfad. Auf diese Weise müssen Sie nicht alle Vorkommen aktualisieren, wenn sich Ihre Anforderungen ändern.

Azure Pipelines bietet eine Reihe integrierter Variablen. Diese Variablen beschreiben Aspekte des Buildprozesses, wie den Buildbezeichner, und die Verzeichnisnamen, in denen Ihre Software erstellt und bereitgestellt wird.

Sie können außerdem eigene Variablen definieren. Hier sehen Sie ein Beispiel mit einer Variablen namens buildConfiguration, die die Releasebuildkonfiguration definiert.
yml

variables:
  buildConfiguration: 'Release'

Verwenden Sie Variablen, wenn Sie denselben Wert mehrmals wiederholen, oder wenn sich ein Wert wie die Version einer Abhängigkeit, ändern könnte.

Sie müssen nicht für jeden Teil Ihrer Buildkonfiguration eine Variable erstellen. Tatsächlich können zu viele Variablen dazu führen, dass Ihr Pipelinecode für andere schwerer zu lesen und zu verstehen ist.

Nehmen Sie sich einen Moment Zeit, um azure-pipelines.yml zu untersuchen. Beachten Sie, dass sich diese Werte wiederholen:

    Buildkonfiguration: Release
    Speicherort des Verzeichnisses wwwroot: Tailspin.SpaceGame.Web/wwwroot
    .NET Core SDK-Version: 3.1.300

Sie verwenden nun Variablen, um diese Werte einmalig zu definieren. Danach verweisen Sie in der gesamten Pipeline auf die Variablen.

    Ändern Sie in Visual Studio Code azure-pipelines.yml, wie hier gezeigt:
    yml

trigger:
- '*'

pool:
  vmImage: 'ubuntu-20.04'
  demands:
  - npm

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '5.0.203'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET SDK $(dotnetSdkVersion)'
  inputs:
    version: '$(dotnetSdkVersion)'

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false

- script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
  displayName: 'Compile Sass assets'

- task: gulp@1
  displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()

Beachten Sie den Abschnitt variables, in dem diese Variablen definiert werden:

    buildConfiguration. Gibt die Buildkonfiguration an.
    wwwrootDir. Gibt den Pfad zum Verzeichnis wwwroot an.
    dotnetSdkVersion. Gibt die zu verwendende Version des .NET Core SDK an.

Um auf diese Variablen zu verweisen, verwenden Sie die $()-Syntax, genau wie bei integrierten Variablen. Hier sehen Sie den Schritt, der node-Sass ausführt, um Sass-Dateien in CSS zu konvertieren. Um den Pfad zum Verzeichnis wwwroot abzurufen, verweist er auf die Variable wwwrootDir.
yml

- script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
  displayName: 'Compile Sass assets'

Der Skriptbefehl verwendet die Variable, um sowohl das Quellverzeichnis für Sass-Dateien als auch das Verzeichnis zu definieren, in das CSS-Dateien geschrieben werden sollen. Außerdem verwendet er die Variable, um den Aufgabennamen zu definieren, der in der Benutzeroberfläche angezeigt wird.

Fügen Sie im integrierten Terminal dem Index die Datei azure-pipelines.yml hinzu, committen Sie die Änderungen, und pushen Sie die Änderung an GitHub.
Bash

    git add azure-pipelines.yml
    git commit -m "Refactor common variables"
    git push origin build-pipeline

    Verfolgen Sie in Azure Pipelines den Build durch die einzelnen Schritte.

    Sie sehen, dass die Variablen durch ihre Werte ersetzt werden, wenn der Build ausgeführt wird. Hier ist zum Beispiel die Aufgabe UseDotNet@2, die die zu verwendende Version des .NET Core SDK festlegt.

    Azure-Pipelines mit der in der Pipeline ausgeführten .NET Core SDK-Aufgabe.

    Wie zuvor können Sie, um das Artefakt anzuzeigen, wenn der Build abgeschlossen ist, zur Buildzusammenfassung navigieren.

Herzlichen Glückwunsch! Sie haben Azure Pipelines erfolgreich verwendet und Ihr erstes Buildartefakt erstellt.
Nächste Lektion: Übung: Erstellen mehrerer Konfigurationen mithilfe von Vorlagen

Sie benötigen Hilfe? Lesen Sie unseren Leitfaden zur Problembehandlung, oder geben Sie spezifisches Feedback, indem Sie ein Problem melden.
Deutsch

    Vorherige Dokumentversionen
    Blog
    Mitwirken
    Datenschutz & Cookies
    Nutzungsbedingungen
    Impressum
    Marken
    © Microsoft 2021

